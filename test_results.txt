============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.4, pluggy-1.3.0
rootdir: /home/joel/color/color
collected 28 items

tests/color/test_color_wipe.py .                                         [  3%]
tests/color/test_set_color.py ...                                        [ 14%]
tests/entity/test_create_entity.py ....                                  [ 28%]
tests/entity/test_delete_entity.py F..                                   [ 39%]
tests/entity/test_get_entities.py ..                                     [ 46%]
tests/entity/test_manage_entity.py FFFF                                  [ 60%]
tests/entity/test_update_entity.py F.F                                   [ 71%]
tests/util/test_has_cyclic_relationship.py FFF                           [ 82%]
tests/util/test_update_light_state_for_entity_and_children.py .          [ 85%]
tests/util/test_validate_color_values.py ....                            [100%]

=================================== FAILURES ===================================
___________________________ test_delete_entity_valid ___________________________

app = <Flask 'color.src'>, init_entity = <Entity 1>

    def test_delete_entity_valid(app, init_entity):
>       delete_data = {'id': init_entity.id}

tests/entity/test_delete_entity.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
../lib/python3.10/site-packages/sqlalchemy/orm/state.py:798: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fd20877d3f0; Entity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fd208427ca0>
attribute_names = {'children', 'end_addr', 'id', 'name', 'parent', 'parent_id', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Entity at 0x7fd20847b2b0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

../lib/python3.10/site-packages/sqlalchemy/orm/loading.py:1584: DetachedInstanceError
___________________________ test_manage_entity_post ____________________________

client = <FlaskClient <Flask 'color.src'>>

    def test_manage_entity_post(client):
        data = {
            'name': 'New Entity',
            'start_addr': 100,
            'end_addr': 200,
            'parent_id': None
        }
>       response = client.post(url_for('manage_entity'), data=json.dumps(data), content_type='application/json')

tests/entity/test_manage_entity.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../lib/python3.10/site-packages/flask/helpers.py:222: in url_for
    return current_app.url_for(
../lib/python3.10/site-packages/werkzeug/local.py:311: in __get__
    obj = instance._get_current_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _get_current_object() -> T:
        try:
            obj = local.get()
        except LookupError:
>           raise RuntimeError(unbound_message) from None
E           RuntimeError: Working outside of application context.
E           
E           This typically means that you attempted to use functionality that needed
E           the current application. To solve this, set up an application context
E           with app.app_context(). See the documentation for more information.

../lib/python3.10/site-packages/werkzeug/local.py:508: RuntimeError
____________________________ test_manage_entity_put ____________________________

client = <FlaskClient <Flask 'color.src'>>

    def test_manage_entity_put(client):
        # First, create an entity
        entity = Entity(name="Existing Entity", start_addr=100, end_addr=200, parent_id=None)
>       with app.app_context():
E       AttributeError: 'function' object has no attribute 'app_context'

tests/entity/test_manage_entity.py:34: AttributeError
__________________________ test_manage_entity_delete ___________________________

client = <FlaskClient <Flask 'color.src'>>

    def test_manage_entity_delete(client):
        # Create an entity to delete
        entity = Entity(name="Entity to Delete", start_addr=100, end_addr=200, parent_id=None)
>       with app.app_context():
E       AttributeError: 'function' object has no attribute 'app_context'

tests/entity/test_manage_entity.py:53: AttributeError
____________________________ test_manage_entity_get ____________________________

client = <FlaskClient <Flask 'color.src'>>

    def test_manage_entity_get(client):
        # Create an entity to retrieve
        entity = Entity(name="Entity to Retrieve", start_addr=100, end_addr=200, parent_id=None)
>       with app.app_context():
E       AttributeError: 'function' object has no attribute 'app_context'

tests/entity/test_manage_entity.py:66: AttributeError
________________________ test_update_entity_valid_data _________________________

app = <Flask 'color.src'>, init_entity = <Entity 1>

    def test_update_entity_valid_data(app, init_entity):
        updated_data = {
>           'id': init_entity.id,
            'name': 'Updated Entity',
            'start_addr': 150,
            'end_addr': 250,
            'parent_id': None
        }

tests/entity/test_update_entity.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
../lib/python3.10/site-packages/sqlalchemy/orm/state.py:798: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fd20877d3f0; Entity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fd208426d40>
attribute_names = {'children', 'end_addr', 'id', 'name', 'parent', 'parent_id', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Entity at 0x7fd207f0e680> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

../lib/python3.10/site-packages/sqlalchemy/orm/loading.py:1584: DetachedInstanceError
_______________________ test_update_entity_invalid_data ________________________

app = <Flask 'color.src'>, init_entity = <Entity 1>

    def test_update_entity_invalid_data(app, init_entity):
        updated_data = {
>           'id': init_entity.id,
            'name': None,  # Invalid data
            'start_addr': 150,
            'end_addr': 250,
            'parent_id': None
        }

tests/entity/test_update_entity.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:566: in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:1086: in get
    value = self._fire_loader_callables(state, key, passive)
../lib/python3.10/site-packages/sqlalchemy/orm/attributes.py:1116: in _fire_loader_callables
    return state._load_expired(state, passive)
../lib/python3.10/site-packages/sqlalchemy/orm/state.py:798: in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7fd20877d3f0; Entity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7fd208316d40>
attribute_names = {'children', 'end_addr', 'id', 'name', 'parent', 'parent_id', ...}
passive = symbol('PASSIVE_OFF')

    def load_scalar_attributes(mapper, state, attribute_names, passive):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
>           raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
                "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Entity at 0x7fd2081becb0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: https://sqlalche.me/e/20/bhk3)

../lib/python3.10/site-packages/sqlalchemy/orm/loading.py:1584: DetachedInstanceError
____________________ test_has_cyclic_relationship_no_cycle _____________________

app = <Flask 'color.src'>, init_entities = None

    def test_has_cyclic_relationship_no_cycle(app, init_entities):
        with app.app_context():
>           assert not has_cyclic_relationship(1, 2)
E           TypeError: 'module' object is not callable

tests/util/test_has_cyclic_relationship.py:32: TypeError
___________________ test_has_cyclic_relationship_with_cycle ____________________

app = <Flask 'color.src'>, init_entities = None

    def test_has_cyclic_relationship_with_cycle(app, init_entities):
        with app.app_context():
            # Introduce a cycle
            entity3 = Entity.query.get(3)
            entity3.parent_id = 1
            db.session.commit()
    
>           assert has_cyclic_relationship(1, 3)
E           TypeError: 'module' object is not callable

tests/util/test_has_cyclic_relationship.py:43: TypeError
___________________ test_has_cyclic_relationship_same_entity ___________________

app = <Flask 'color.src'>, init_entities = None

    def test_has_cyclic_relationship_same_entity(app, init_entities):
        with app.app_context():
>           assert has_cyclic_relationship(1, 1)
E           TypeError: 'module' object is not callable

tests/util/test_has_cyclic_relationship.py:47: TypeError
=============================== warnings summary ===============================
tests/util/test_has_cyclic_relationship.py::test_has_cyclic_relationship_with_cycle
  /home/joel/color/color/tests/util/test_has_cyclic_relationship.py:39: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    entity3 = Entity.query.get(3)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/entity/test_delete_entity.py::test_delete_entity_valid - sqlalch...
FAILED tests/entity/test_manage_entity.py::test_manage_entity_post - RuntimeE...
FAILED tests/entity/test_manage_entity.py::test_manage_entity_put - Attribute...
FAILED tests/entity/test_manage_entity.py::test_manage_entity_delete - Attrib...
FAILED tests/entity/test_manage_entity.py::test_manage_entity_get - Attribute...
FAILED tests/entity/test_update_entity.py::test_update_entity_valid_data - sq...
FAILED tests/entity/test_update_entity.py::test_update_entity_invalid_data - ...
FAILED tests/util/test_has_cyclic_relationship.py::test_has_cyclic_relationship_no_cycle
FAILED tests/util/test_has_cyclic_relationship.py::test_has_cyclic_relationship_with_cycle
FAILED tests/util/test_has_cyclic_relationship.py::test_has_cyclic_relationship_same_entity
=================== 10 failed, 18 passed, 1 warning in 1.12s ===================
